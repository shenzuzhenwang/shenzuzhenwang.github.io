{"meta":{"title":"“神祖”的个人博客","subtitle":"shenzu's blog","description":"个人博客，主要涉及个人的经历，部分编程工具与经验等","author":"shenzu","url":"https://shenzuzhenwang.github.io","root":"/"},"pages":[{"title":"关于我","date":"2025-05-22T09:44:22.000Z","updated":"2025-05-22T12:46:54.714Z","comments":true,"path":"about/index.html","permalink":"https://shenzuzhenwang.github.io/about/index.html","excerpt":"","text":""},{"title":"个人简介英文版","date":"2022-08-05T07:56:19.000Z","updated":"2025-05-22T11:56:00.054Z","comments":true,"path":"about-me-EN/index.html","permalink":"https://shenzuzhenwang.github.io/about-me-EN/index.html","excerpt":"","text":"中文版 Wang PengboTel/WeChat：15353506830 QQ：1073693127 E-mail：pengbo_wang@foxmail.com ​ pengbo_wang@outlook.com city：Jiangsu Suzhou, China Education ExperienceBachelor University：Northwestern Polytechnic University | School of Computer Science | Computer Science and Technology | Admission in 2019 GPA: 3.766 Comprehensive Score Ranking: 5/208 CCF-CSP: 270 (Ranking 6.28%) Major Courses: Computer Composition and System Architecture (94), Compilation Principles (98), Database Principles (94), Signal and Systems Analysis (94), Algorithm Design and Analysis (91), Digital Logic Design (91), Computer Network Principles (90) Research InterestEmbedment Development, Network and System Research ExperienceNone ProjectsNPU Dancing Robot Research &amp; Training Base，2020/07 - 2022/07 My main responsibility is Embedment Development and ROS control. I can use Linux operating systems proficiently. I can do some work about STM32 and FreeRTOS, or ROS。 Video and Link： Honors &amp; AwardsPersonal Honors： National Scholarship | Northwestern Polytechnical University, 2021 - 2022 Outstanding Students | Northwestern Polytechnical University, 2019 - 2022, three consecutive years First-Class Scholarship | Northwestern Polytechnical University, 2020 - 2022, two consecutive years “Samsung” Special Scholarship | Northwestern Polytechnical University, 2020 - 2021 Outstanding Communist Youth League Member | Northwestern Polytechnical University, 2020 - 2023, three consecutive years Academic Competitions： First Place | 2021RoboCup China Open, Rescue Robotic Group, Robotic arm for dexterous operation, 2021/05 Second Place | 2021RoboCup China Open, Rescue Robotic Group, Overall results, 2021/05 Second Place | 2021China Robot Competition, Robotic arm for dexterous operation, 2021/04 Second Place | 2021China Robot Competition, Robotic arm target detection, 2021/04 First Prize | 2021China University Intelligent Robot Creativity Competition, 2021/08 Third Prize | 2021 “Huawei Cup” Internet of Things Design Competition, 2021/08 Third Prize | 2020National Student Embedded Chip and System Design Competition, 2020/11 Third Prize | 2022National Student Algorithm Design and Programming Challenge, 2022/03 Excellent Project | 2021University Student Innovation and Entrepreneurship Training Program, 2021 - 2022"},{"title":"分类","date":"2025-05-22T09:40:22.584Z","updated":"2022-08-04T13:55:38.080Z","comments":false,"path":"categories/index.html","permalink":"https://shenzuzhenwang.github.io/categories/index.html","excerpt":"","text":""},{"title":"个人简介","date":"2022-08-04T13:26:10.000Z","updated":"2025-05-22T12:16:03.892Z","comments":true,"path":"about-me/index.html","permalink":"https://shenzuzhenwang.github.io/about-me/index.html","excerpt":"","text":"English 王鹏博电话/微信：15353506830 QQ：1073693127 邮箱：pengbo_wang@foxmail.com ​ pengbo_wang@outlook.com 现居城市：江苏省苏州市 教育经历本科：西北工业大学 | 计算机学院 | 计算机科学与技术 | 2019级 前六学期GPA：3.766 综合成绩排名：5/208 CCF-CSP认证：270分（累计排名6.28%） 主修课程：计算机组成与系统结构（94）、编译原理（98）、数据库原理（94）、信号与系统分析（94）、算法设计与分析（91）、数字逻辑设计（91）、计算机网络原理（90） 研究兴趣嵌入式开发、网络与系统 科研经历暂缺 项目经历西北工业大学舞蹈机器人创新实践基地，2020/07 - 2022/07 核心成员，主要负责嵌入式开发与ROS机器人控制任务。可以较为熟练使用Linux操作系统。可以进行STM32与FreeRTOS开发，ROS机器人开发。 荣誉奖项个人荣誉： 国家奖学金 | 西北工业大学，2021 - 2022 优秀大学生 | 西北工业大学，2019 - 2022，连续三年 一等奖学金（前5%） | 西北工业大学，2020 - 2022，连续两年 “三星”专项奖学金 | 西北工业大学，2020 - 2021 优秀共青团员 | 西北工业大学，2020 - 2023，连续三年 学科竞赛： 国家冠军 | 2021RoboCup机器人世界杯中国赛救援机器人组灵巧操作赛，2021/05 国家亚军 | 2021RoboCup机器人世界杯中国赛救援机器人组总成绩，2021/05 国家亚军 | 2021中国机器人大赛灵巧操作，2021/04 国家亚军 | 2021中国机器人大赛目标探测，2021/04 国家一等奖 | 2021第四届中国高校智能机器人创意大赛，2021/08 国家三等奖 | 2021年“华为杯”全国大学生物联网设计竞赛，2021/08 国家三等奖 | 2020第三届全国大学生嵌入式芯片与系统设计竞赛，2020/11 国家铜奖 | 2022年第三届全国大学生算法设计与编程挑战赛，2022/03 省级优秀结题 | 2021年大学生创新创业项目，2021 - 2022"},{"title":"404","date":"2018-09-30T09:25:30.000Z","updated":"2025-05-22T09:51:42.261Z","comments":true,"path":"404.html","permalink":"https://shenzuzhenwang.github.io/404.html","excerpt":"","text":""},{"title":"books","date":"2025-05-22T12:47:13.000Z","updated":"2025-05-22T12:47:24.502Z","comments":true,"path":"books/index.html","permalink":"https://shenzuzhenwang.github.io/books/index.html","excerpt":"","text":""},{"title":"contact","date":"2025-05-22T12:59:22.000Z","updated":"2025-05-22T12:59:56.898Z","comments":true,"path":"contact/index.html","permalink":"https://shenzuzhenwang.github.io/contact/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-03-08T08:34:02.777Z","updated":"2022-08-04T13:55:39.006Z","comments":false,"path":"tags/index.html","permalink":"https://shenzuzhenwang.github.io/tags/index.html","excerpt":"","text":""},{"title":"音乐","date":"2025-05-22T12:36:29.000Z","updated":"2025-05-22T12:57:06.632Z","comments":true,"path":"musics/index.html","permalink":"https://shenzuzhenwang.github.io/musics/index.html","excerpt":"","text":""}],"posts":[{"title":"2022计算机保研经验","slug":"2022计算机保研经验","date":"2023-02-07T11:27:37.000Z","updated":"2025-05-22T12:09:24.111Z","comments":true,"path":"2023-02-07-2022-ji-suan-ji-bao-yan-jing-yan/","link":"","permalink":"https://shenzuzhenwang.github.io/2023-02-07-2022-ji-suan-ji-bao-yan-jing-yan/","excerpt":"","text":"一、个人水平 本科：西北某末流酒吧舞 专业：计算机学院 计算机科学与技术 Rank：综排前5%（专业约200人） 英语：CET-4、CET-6均擦线（不到470） 科研：无 竞赛：机器人相关水赛若干 + PPT竞赛若干（国奖省奖都有） 研究意向：尽量不去 AI，拒绝 CV，偏向一些计算机底层领域 学位偏好：有点读博的打算，偏向学硕，学校够好老师不烂直博也行 二、保研tips（主观） 计算机保研交流群（绿群）： 605176069（一群）、943826679（二群） 靠前的大学的预推免不一定比夏令营简单，因为坑被占完了或者压根没有，就算有大部分也是剩下的烂坑（当然有些学校就爱预推免收人，dddd） 纯个人经验：我所有学校提交的排名均为综排（让提交成绩排名的学校我也交的综排），而且除了清北都没有被卡 CET 6：其实过了就行，我看到的只有两所学校夏令营卡成绩，感觉就是初筛才看，后面就看笔试面试表现了，反正我的擦线成绩感觉没咋拖后腿 机试：不是所有学校有，但很多都有，而且有的学校只让用C/C++ CCF - CSP：非必须，有算法基础的争取刷个300+（北航要C/C++不要ALL），没有基础和兴趣的还是算了，考一次还是挺贵的（周围很多高Rank大佬都没有，有的成绩大部分也不高） 提前陶瓷：本人没有干过，但除了清北以外也都让入营了，故个人斗胆认为陶瓷和入营关系不大（当然假如非常喜欢某老师还是应该套） 计算机系统能力大赛：超有含金量的竞赛（个人认为同等级下难度与含金量不小于ACM），我知道的有人保研清北计算所，这个比赛给他们加了不少分 鸽子与海王：个人提倡大家尽量别当，拿来保底的、大概率不去的 offer 就尽量别联系老师了。（23年线下的话可能会好点） 三、夏令营（全投硕士） 学院 入营情况 结果 复旦大学工程与应用技术研究院 √ 优营，后鸽 同济大学电院计算机系 √ ≈优营，后鸽 上海交通大学软件学院 √ 机试完鸽了 南京大学计算机科学与技术系 √ 候补（其实算被刷了） 中国科学院软件所 √ 入营鸽 中国科学技术大学计算机科学与技术学院 √ 最终offer 浙江大学软件学院 √ 超级大海王，鸽 华中科技大学国光 √ 没必要投的，反思 西安交通大学计算机学院 √ 也不该投 哈尔滨工业大学（深圳）计算机学院 × bar比华五都高（流汗黄豆） 中国科学院计算技术研究所 × 计算所bar好高 北京大学软件与微电子学院 × 软微今年bar巨高 1. 复旦大学工程与应用技术研究院（智能机器人研究院）特点：计算机人上人，只有是0812，即学硕与直博，没有专硕（对比隔壁机械只有专硕，不用考虑校外租房） 考核：今年只有面试 面试内容为英文自我介绍+英文问答+计算机基础知识，15min，其中计算机基础知识并非408，是一部分计算机底层知识或计算机常识，也没办法复习，凭个人平日积累吧 个人觉得面试得还不错，优营 但是最后选导师时，发现导师的方向都不算太喜欢，比较强的zwq、zlh没名额了，就没有联系导师当保底了，最后鸽。 此外教务老师人非常好，还说可以帮忙联系导师，但最后好像还是被鸽穿了（年年如此） 评价：非常推荐，9月底有概率捡漏强导 自测工研院优营后鸽，预推免没法再报计院，不知道是不是个人问题 2. 同济大学电子与信息工程学院计算机科学与技术系特点：好像有oq，不要Rank 1%，而且考核比较正式 考核：我见过的唯一一个 笔试+机试+面试 笔试非常正规，内容为408+英文文献翻译，我大概会一半多（剩下全还给老师了） 机试我称之为小模拟，类似于实现某个算法并应用，不算太难，三道题，我自测应该全过，不过值得吐槽的是他们没有在线OJ 面试为英文问答+专业知识+政治，不知道为啥，大部分都是政治，类似于老师push怎么办，我还以为寄了 成绩一出，排在中游，感觉还行，但已经有复旦优营了，鸽 评价：考核很正式，但用惯了在线OJ，机试有点不适应 3. 上海交通大学软件学院特点：IPADS实验室超强，但软院有四五个方向，我没选IPADS，怕太卷 考核：机试+面试 机试为大模拟，模拟一个决策树，并且还贴心的将每个步骤拆开，我每做完一步都检查一下，最后一步没来得及完成，但这是我编码最舒服的一次 面试需要读论文，对方向不满意+没时间读+与南大冲突，遂鸽 值得一提，宣讲里说学硕极少，大部分都是专硕，名额不多，其中本校占了很大一部分，而且有些方向专硕可能会去嘉兴（甚至贵州），加上上交专硕没宿舍 评价：老师人很好，很诚实。方向只有IPADS比较好，据说隔壁院有人捡漏了，羡慕 4. 南京大学计算机科学与技术系特点：初审好像不筛人，通过笔试筛人 考核：笔试+面试（硬核） 笔试只有选择题，但依旧非常难，做过的都知道，感觉一大半都是蒙的 面试更硬核，上来英文解释专业名词，把大脑CPU干炸了（中文我都不会解释），总之就是大寄特寄 排到了wl里，但到了928也没动静。 评价：南大太硬核了，我唯一一个疯狂道歉的夏令营 5. 中国科学技术大学计算机科学与技术学院特点：没有预推免，没有直博 考核： 面试 面试是PPT自我介绍+英文问答+专业知识+项目介绍，大部分时间都在自我介绍和问项目。 面试合格后需要有老师接收才行 拿了优营后，通过同学推荐（感谢）+个人喜好，联系了一个课题组，最后老师同意留个名额给我 评价：中科大培养方式非常好，只有硕士，读博需要转博，入营送奖品 6. 其余大学华科国光确实不该报，有点海，反思 西交计院夏令营不发优营，放了我校一堆人进来，最后一个没去 计算所好像卡我们学校前三，没几个人入营，预推免好像挺好入的，但好像大部分都是专硕 倒是自所我们学校入了一堆控制的，而且拿优营的不少 软微今年bar挺高，我们学校夏令营就入了一个，预推免还有个捡漏的，但好像方向emmm 哈深最值得吐槽，比华五bar都高，活该被鸽 四、预推免夏令营已经有了一个比较满意的offer了，故预推免随缘投，仅准备投清北 清华竟然入了贵系，北大没有回音 清华贵系完全是出乎意料，但也觉得不太可能从大佬手中抢到名额，遂摆烂 考核：机试+面试 清贵的机试超难，三道题，感觉差不多是CSP后三题的水平，题型也像。我抱着玩的心态怒怼大模拟四个多小时，遂寄 面试没脸参加 五、写在最后 感谢每一位陪我走完保研路的朋友，愿今后继续互利共勉 祝愿每一位保研人最终都能够有理想的去处！","categories":[{"name":"经验","slug":"经验","permalink":"https://shenzuzhenwang.github.io/categories/%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"保研","slug":"保研","permalink":"https://shenzuzhenwang.github.io/tags/%E4%BF%9D%E7%A0%94/"}]},{"title":"鼠鼠管理系统","slug":"鼠鼠管理系统","date":"2023-01-12T11:42:45.000Z","updated":"2025-05-22T11:45:18.292Z","comments":true,"path":"2023-01-12-shu-shu-guan-li-xi-tong/","link":"","permalink":"https://shenzuzhenwang.github.io/2023-01-12-shu-shu-guan-li-xi-tong/","excerpt":"","text":"鼠鼠管理系统一、软件框架本工具以Qt5.14为基本框架，经过多次试验，并未发现明显问题。 本工具主要语言为C++，编译器为minGW，build工具为gmake，使用Qt官方IDE即Qt Creator。 二、模块描述1. 主界面模块主界面模块包括多个子界面： 小鼠信息界面，可以在表格上直接查看小鼠的各项信息，并且可以通过点击，进入小鼠信息模块； 查询界面，可以通过名称、出生日期、最后喂养时间、健康状态和负责人来查询特定的小鼠； 死亡列表界面，可以在表格上直接查看死亡小鼠的各项信息，并且可以直接在表格上进行修改； 喂食记录页面，可以在表格上直接查看喂食的记录，并且可以直接在表格上进行修改； 登录记录页面，可以查看用户的登录记录，并且可以直接在表格上进行修改； 用户信息界面，可以查看所有用户的各项信息，并且可以直接在表格上进行修改 2. 小鼠信息模块显示ID号、名称、描述、健康程度、负责人、出生日期和死亡日期，并且具有喂食、出生、死亡、修改信息等功能。 3. 数据库连接模块总共创建了三个连接：normal、senior、admin，根据登录用户的不同权限，来选择使用对应的连接。 4. 登录模块通过在登录界面上输入用户名与密码，然后在数据库中进行查询，最后根据是否查询正确，与权限等级，来进行登录。 5. 注册模块通过在注册输入各项信息：用户名、密码、地址、手机号、电话号等信息，完成注册，并将信息保存至数据库中。 6. 帮助模块在帮助界面上，可以查看到详细的使用方法，用于初次使用本系统的用户。","categories":[{"name":"管理系统","slug":"管理系统","permalink":"https://shenzuzhenwang.github.io/categories/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Cpp","slug":"Cpp","permalink":"https://shenzuzhenwang.github.io/tags/Cpp/"},{"name":"Qt","slug":"Qt","permalink":"https://shenzuzhenwang.github.io/tags/Qt/"},{"name":"MySQL","slug":"MySQL","permalink":"https://shenzuzhenwang.github.io/tags/MySQL/"}]},{"title":"使用C++11实现SysY语言简单编译器","slug":"使用C-11实现SysY语言简单编译器","date":"2022-12-11T11:40:17.000Z","updated":"2025-05-23T12:04:45.362Z","comments":true,"path":"2022-12-11-shi-yong-c-11-shi-xian-sysy-yu-yan-jian-dan-bian-yi-qi/","link":"","permalink":"https://shenzuzhenwang.github.io/2022-12-11-shi-yong-c-11-shi-xian-sysy-yu-yan-jian-dan-bian-yi-qi/","excerpt":"","text":"使用C++11实现SysY语言简单编译器github: https://github.com/shenzuzhenwang/Complier-SysY 一、整体简介使用架构：arm7ve 实现语言：C++ 测试样例：SysY 2021，功能样例。全部通过 SysY 2021，性能样例。部分性能优化极大 词法分析：手工书写 语法分析：递归下降 AST：有，遍历AST生成IR IR：三地址码、SSA、类LLVM的IR 总代码量：约10000行 优化： 常量折叠 死代码删除 只读全局转常量 只写变量移除 去除无用分支 基本块合并 循环不变量外提（参考） 公共子表达式删除（参考） 局部数组传播 常量数组全局化 主要参考：北航 早安！白给人and 《Efficient Construction of Static Single Assignment Form》 二、词法分析定义了TokenInfo来代表每个token的类型，同时，还特别区分识别八进制、十进制、十六进制，与可能存在的溢出。 三、语法分析首先，按照SysY的语法规则，定义了不同的节点类，并存在着继承关系 然后按照给定的语法，将会按照优先级，进行依次的递归下降分析，最后生成对应的AST节点 此外，还有symbolTable记录标识符名称，如函数名称，以及不同函数内的变量名称等 四、IR生成IR的各类型节点继承图如下（类似LLVM的IR） 遍历之前生成的AST。 首先生成全局的变量GlobalValue与全局常量数组ConstantValue（全局常量直接替代）。 进入函数头，生成Function与入口BasicBlock，并记录函数参数ParameterValue。 blockToIr：之后进入函数体BLOCK，逐步分析，如果为局部变量，则定义VarDeclNode，并查看后面可能有的初始化值EXP；如果为语句，则 stmtToIr：判断语句的类型，ASSIGN则分析右值EXP；BLOCK则blockToIr； IF与IF_ELSE则需要先分析条件conditionToIr，再生成每个可能的BasicBlock（包括ifStmt，elseStmt），并维护BasicBlock的前驱后继（ifStmt，elseStmt，endIf与当前的stmt，最后分析新生成的每个BasicBlock其中的语句stmtToIr； WHILE先分析条件conditionToIr，再生成whileBody，whileJudge，whileEnd，preWhileBody等BasicBlock，并维护前驱后继，分析每个BasicBlock其中的语句stmtToIr，并记录循环深度 RETURN与BREAK则会直接改变WHILE中BasicBlock的前驱后继 conditionToIr：短路求值，依次递归分析LOrExpNode、LAndExpNode、EqExpNode（优先级依次递增），如果存在短路求值的情况，则会生成新的BasicBlock，并改变此BasicBlock的前驱后继，再继续分析conditionToIr expToIr：分析不同情况的表达式，并将给表达式添加使用对象（之后会用） 五、SSASSA主要参考《Simple and Efficient Construction of Static Single Assignment Form》 对于每个基本块我们维护一个从每个源码变量到当前定义表达式的映射（map）。当对一个变量赋值时，我们记录 IR 的右边作为变量的当前定义。于是，当一个变量被读取时，我们查询它的当前定义 writeVariable(variable, block, value): currentDef[variable][block] ← value readVariable(variable, block): if currentDef[variable] contains block: # local value numbering return currentDef[variable][block] # global value numbering return readVariableRecursive(variable, block) 局部值编号的实现 在前驱块中查找一个值可能会导致进一步的递归查找。由于程序中有循环，可能导致无法终结的递归。因此在递归前，我们先创建没有操作数的 φ 函数并记录为基本块中的对应变量的当前定义。然后确定 φ 函数的操作数。如果递归查找回到了这个块中，这个 φ 函数将会提供一个定义并终止递归。 readVariableRecursive(variable, block): if block not in sealedBlocks: # 块不封闭，仅存在于循环体，此时可能前驱未加入完 val ← new Phi(block) incompletePhis[block][variable] ← val else if |block.preds| = 1: # 优化只有一个前驱的情况：不需要 phi val ← readVariable(variable, block.preds[0]) else: # 如果有两个以上前驱块，用无操作数的 phi 破坏潜在的循环 val ← new Phi(block) writeVariable(variable, block, val) val ← addPhiOperands(variable, val) writeVariable(variable, block, val) return val addPhiOperands(variable, phi): # 从前驱中确定操作数 for pred in phi.block.preds: # 递归向前驱块寻找同名变量的值，可能会由于循环，找到一样phi phi.appendOperand(readVariable(variable, pred)) # 由于可能由于循环，phi的操作数的值为phi自己；或是两个操作数相同，此时需要去除phi return tryRemoveTrivialPhi(phi) 递归查找可能会留下冗余的 φ 函数，当且仅当它仅仅多次引用它自己和另一个值 v。这样一个 φ 函数能被移除并且用 v 代替它。 tryRemoveTrivialPhi(phi): same ← None # 操作数为自己和另一个值的时候，此phi可以用另一个值代替 for op in phi.operands: if op = same || op = phi: continue # 只有一个唯一值或引用自己 if same 6= None: return phi # The phi merges at least two values: not trivial same ← op if same = None: same ← new Undef() # phi 不可达或在开始块中 users ← phi.users.remove(phi) # 找出所有以这个 phi 为操作数的 φ 函数，除了它本身 phi.replaceBy(same) # 将所有用到 phi 的地方替代为 same 并移除 phi # 尝试去递归移除用到 phi 的 φ 函数，因为它可能变得不重要（trivial） for use in users: if use is a Phi: tryRemoveTrivialPhi(use) return same 如果一个基本块没有前驱会被添加进来，我们称这样的基本块是密封的（sealed）。只有被填满的块有后继，前驱总是被填满。注意一个密封的块不一定被填满。直观的说，一个被填满的块包含它所有的指令（instructions）和能给后继提供的变量定义。相反，当前驱都是已知时，一个被密封的块可以在它的前驱查询变量定义。 sealBlock(block): # 在前驱查询变量定义 加入变量的phi可能值 for variable in incompletePhis[block]: addPhiOperands(variable, incompletePhis[block][variable]) sealedBlocks.add(block) 六、IR优化1. 只读全局变量转为常数先查看变量是否有被写入的可能，如果有使用store指令，或者全局数组被当做参数，则有写入的可能。 如果此全局变量没有被写入的可能，则将全局变量转换为常数，或者const array 2. 常量折叠遍历每条IR，在二元操作中，如果两方都是常数，则直接得出结果；如果一方为特殊的常数（如0、1、-1等），则也可得出结果，或优化至仅一个操作数 在一元操作中，可以将多个一元操作简化。 在load操作中，可以直接提取const array中的常数。 3. 局部数组传播记录数组被执行的操作，如果是store指令，且offset为常数，则记录目前对应位置的值；如果是load指令，且offset为常数，则查看有没有记录的值，有的话直接提取为常数；如果是其他操作，则清除之前记录的值（因为不知道数组是否改变，或改变了哪里）。 4. 只写变量清除记录局部数组和全局变量被执行的操作，如果只有store而没有load，则去除此变量 5. 局部数组全局化记录局部数组被执行的操作，如果其中只有store和load操作，且store的操作只有一次，offset和value均为常数，则将此局部数组转为const array 6. 循环不变量移除（参考）对于每个函数，创建支配树，找到循环块，并找到block中的不动代码，最后插入有着循环不变量的块 7. 公共子表达式删除对比两个指令的表达式是否相同（hashCode），以及对比相同表达式的两个值相同（equals），如果都一样，则变量直接替代即可 8. 去除无用分支当分支条件为常数时，去除其中无用的分支块 9. 基本块合并当某个基本块只有一个后继块时，可以去除掉跳转指令，并将后继块的phi指令移到此块，将两个块合并 10. 死代码删除记录每个指令被使用的情况。 去除不被调用的函数（除main函数） 去除不被使用的全局变量 去除不用的块，先构建块的后继树，如果某个块没在后继树中，则此块不被使用 去除块不用的指令，如，有结果指令，但结果不被使用；调用的函数返回值不被使用，且函数无副作用（修改了自己范围之外的资源） 11. 基于图着色的寄存器分配（参考）构建冲突图，标记每个变量活跃的时间，遍历每条指令，如果存在活跃值冲突，则加入冲突图表 最后分配物理寄存器，如果寄存器不足，无法解决冲突，则选取权重最小的变量，放入内存中，再次重新分配寄存器 七、汇编指令生成 首先，将全局变量放入.data中 之后，处理每个函数，加载形参（前四个在寄存器，四个之后放入图着色分配的寄存器），记录函数的返回地址，并分配栈上的空间，然后将函数的basicblock转换为汇编bbToMachineBB，此外，要向每个块前加label，每800指令，或在块的最后，加载一次全局变量 bbToMachineBB： RET：保存返回值至R0，sp释放栈 BR：先进行比较，之后按比较进行跳转 JMP：直接跳转即可 INVOKE：先进行函数调用前的操作，传递参数，然后跳转至目标函数，最后重建上下文，记录返回的值 UNARY：执行取负（0-x）和取反（cmp值与0，相等则变为1，否则变为0） BINARY：取余需要，先进行除法，在对结果进行三元乘减；比较指令需要通过mov指令加条件得到；乘除操作两个操作数需要均为寄存器；其余操作一个数可为立即数 CMP：通过mov指令加条件得到 LOAD：全局变量，基地址与偏移量已知，直接加载；局部数组，先计算相对sp偏移量，再进行加载 STORE：与LOAD类似 PHI：将phi的值移入对应的寄存器 立即数：先判断立即数是否合法，不合法需要mov","categories":[{"name":"编译器","slug":"编译器","permalink":"https://shenzuzhenwang.github.io/categories/%E7%BC%96%E8%AF%91%E5%99%A8/"}],"tags":[{"name":"Complier","slug":"Complier","permalink":"https://shenzuzhenwang.github.io/tags/Complier/"},{"name":"Cpp","slug":"Cpp","permalink":"https://shenzuzhenwang.github.io/tags/Cpp/"}]},{"title":"self-introduction","slug":"self-introduction","date":"2022-08-04T05:05:49.000Z","updated":"2022-08-05T11:51:19.624Z","comments":true,"path":"2022-08-04-self-introduction/","link":"","permalink":"https://shenzuzhenwang.github.io/2022-08-04-self-introduction/","excerpt":"","text":"在下shenzu，蒟蒻一名。","categories":[{"name":"个人介绍","slug":"个人介绍","permalink":"https://shenzuzhenwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D/"}],"tags":[{"name":"蒟蒻","slug":"蒟蒻","permalink":"https://shenzuzhenwang.github.io/tags/%E8%92%9F%E8%92%BB/"}]}],"categories":[{"name":"经验","slug":"经验","permalink":"https://shenzuzhenwang.github.io/categories/%E7%BB%8F%E9%AA%8C/"},{"name":"管理系统","slug":"管理系统","permalink":"https://shenzuzhenwang.github.io/categories/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"},{"name":"编译器","slug":"编译器","permalink":"https://shenzuzhenwang.github.io/categories/%E7%BC%96%E8%AF%91%E5%99%A8/"},{"name":"个人介绍","slug":"个人介绍","permalink":"https://shenzuzhenwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D/"}],"tags":[{"name":"保研","slug":"保研","permalink":"https://shenzuzhenwang.github.io/tags/%E4%BF%9D%E7%A0%94/"},{"name":"Cpp","slug":"Cpp","permalink":"https://shenzuzhenwang.github.io/tags/Cpp/"},{"name":"Qt","slug":"Qt","permalink":"https://shenzuzhenwang.github.io/tags/Qt/"},{"name":"MySQL","slug":"MySQL","permalink":"https://shenzuzhenwang.github.io/tags/MySQL/"},{"name":"Complier","slug":"Complier","permalink":"https://shenzuzhenwang.github.io/tags/Complier/"},{"name":"蒟蒻","slug":"蒟蒻","permalink":"https://shenzuzhenwang.github.io/tags/%E8%92%9F%E8%92%BB/"}]}